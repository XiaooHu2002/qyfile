var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import EventEmitter from 'eventemitter3';
import XHR from './xhr';
import SubTitleParser from './parser';
import { addClass, removeClass, typeOf, findIndexByTime, findCIndexByTime, isMobile, addCSS, createDom } from './utils';
import { addObserver, unObserver } from './observer';
import './style/index.scss';

// eslint-disable-next-line no-unused-vars
var TEXT_TRACK_MOD = {
  label: '',
  language: '',
  id: '',
  isDefault: false,
  url: '',
  json: []
};

var ERROR = [{
  code: 0, // 切换成功
  msg: 'SUCCESS'
}, {
  code: 1, // 下载错误
  msg: 'LOAD_ERROR'
}, {
  code: 2, // 解析错误
  msg: 'PARSER_ERROR'
}, {
  code: 3, // 格式不支持
  msg: 'FORMAT_NOT_SUPPORTED'
}, {
  code: 4, // id或者语言不存在
  msg: 'ID_OR_LANGUAGE_NOT_EXIST'
}, {
  code: 5, // 参数错误
  msg: 'PARAMETERS_ERROR'
}, {
  code: 6, // 操作中断
  msg: 'ABORT'
}, {
  code: 7, // 未知错误
  msg: 'UNKNOWN'
}];

var EVENTS = {
  RESIZE: 'resize'
};

function _ERROR(code) {
  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var ret = {
    code: ERROR[code].code,
    msg: ERROR[code].msg
  };
  Object.keys(error).map(function (key) {
    ret[key] = error[key];
  });
  return ret;
}

/**
 * 加载字幕
 * @param {*} textTrack
 */
function __loadText(textTrack) {
  return new Promise(function (resolve, reject) {
    if (textTrack.list) {
      resolve(textTrack);
    }
    new XHR({ url: textTrack.url, type: 'text' }).then(function (data) {
      SubTitleParser.parse(data.res.response, function (data, error) {
        if (error) {
          var err = _ERROR(2, error);
          console.trace(err);
          reject(err, { format: data.format });
        } else if (!data.format) {
          var _err2 = _ERROR(3);
          console.trace(_err2);
          reject(_err2);
        } else {
          textTrack.list = data.list;
          textTrack.format = data.format;
          textTrack.styles = data.styles;
          resolve(textTrack);
        }
      });
    }).catch(function (err) {
      var _err = _ERROR(1, { statusText: err.statusText, status: err.status, type: err.type, message: 'http load error' });
      console.trace(_err);
      reject(_err);
    });
  });
}

/**
 * 切换的语言和当前的是否一致
 * @param {*} src
 * @param {*} dist
 * @returns
 */
function checkSubtitle(src, dist) {
  if (src.id && src.id === dist.id || src.language && src.language === dist.language) {
    return true;
  }
  return false;
}

var IS_MOBILE = false;

var Subtitle = function (_EventEmitter) {
  _inherits(Subtitle, _EventEmitter);

  _createClass(Subtitle, [{
    key: 'version',
    get: function get() {
      return '1.0.12';
    }
  }]);

  function Subtitle(options) {
    _classCallCheck(this, Subtitle);

    var _this = _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).call(this));

    IS_MOBILE = isMobile();
    _this.currentText = null; // 当前字幕信息
    _this.textTrack = []; // 字幕列表
    _this._cid = -1; //  当前字幕索引
    _this._gid = -1; // 当前字幕组索引
    _this._cids = [];
    _this._iId = null;
    _this._iC = 0;
    _this.player = null;
    _this.root = null;
    _this.config = {
      line: 'double', // 行数
      bottom: 0, // 底部高度
      mode: 'stroke',
      defaultOpen: false, // 是否默认开启
      baseSizeX: 49, // 横向基准字号
      baseSizeY: 28, // 竖向基准字号, 宽高比例大于1.2视作竖向视频
      minSize: 16, // 最小字号
      minMobileSize: 13, // 移动端兜底字号
      fitVideo: true, // 是否适配视频画面
      offsetBottom: 2, // 底部边距百分比
      fontColor: '#fff' // 字体颜色
    };

    _this._ctime = 0;
    _this._loadingTrack = {};
    Object.keys(_this.config).map(function (key) {
      if (options[key] !== undefined && options[key] !== null) {
        _this.config[key] = options[key];
      }
    });
    _this._isOpen = _this.config.defaultOpen || false;

    _this._videoMeta = {
      scale: 0,
      videoHeight: 0,
      videoWidth: 0,
      lwidth: 0, // 当前容器宽度
      lheight: 0, // 当前容器高度
      vWidth: 0, // 视频画面实际宽度
      vHeight: 0, // 视频画面实际高度
      vBottom: 0, // 视频画面底部距离
      vLeft: 0, // 视频画面左边距离
      marginBottom: 0 // 字幕底部边距
    };
    if (!options.subTitles || typeOf(options.subTitles) !== 'Array') {
      return _possibleConstructorReturn(_this);
    }
    if (options.player) {
      _this.attachPlayer(options.player);
    }
    _this.setSubTitles(options.subTitles);
    return _this;
  }

  _createClass(Subtitle, [{
    key: 'setSubTitles',
    value: function setSubTitles() {
      var subTitles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var _this2 = this;

      var isOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var ieRemoveFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var _isOpen = this._isOpen || isOpen;
      ieRemoveFirst && this.innerRoot && this.switchOff();
      this.currentText = null;
      this.textTrack = [];
      subTitles.map(function (item) {
        var text = {};
        Object.keys(item).map(function (key) {
          text[key] = item[key];
        });
        if (text.isDefault) {
          _this2.currentText = text;
        }
        _this2.textTrack.push(text);
      });
      this.currentText && __loadText(this.currentText).then(function (textTrack) {
        _this2.addStyles(textTrack);
        if (_isOpen) {
          _this2.switch();
        }
      });
    }
  }, {
    key: 'addStyles',
    value: function addStyles(textTrack) {
      var styles = textTrack.styles,
          format = textTrack.format;

      if (styles && format === 'vtt') {
        styles.map(function (item) {
          if (!item.key) {
            item.key = 'xg-text-track-span';
          }
        });
        addCSS(styles, 'xg-text-track');
      }
    }
  }, {
    key: 'attachPlayer',
    value: function attachPlayer(player) {
      var _this3 = this;

      if (!player) {
        return;
      }
      if (this.player) {
        this.detachPlayer();
      }
      var _config = this.config,
          fontColor = _config.fontColor,
          mode = _config.mode,
          fitVideo = _config.fitVideo;

      this.player = player;
      this.root = document.createElement('xg-text-track');
      this.root.className = 'xg-text-track';
      !this._isOpen && addClass(this.root, 'text-track-hide');
      !fitVideo && addClass(this.root, 'text-track-no-fitvideo');
      mode && addClass(this.root, 'text-track-' + mode);
      this.innerRoot = document.createElement('xg-text-track-inner');
      this.root.appendChild(this.innerRoot);
      if (fontColor) {
        this.root.style.color = fontColor;
      }
      if (this.currentText) {
        ['language', 'id', 'label'].map(function (key) {
          _this3.root.setAttribute('data-' + key, _this3.currentText[key] || '');
        });
      }
      this.player.root.appendChild(this.root);
      ['destroy', '__onTimeupdate', '_onResize'].map(function (item) {
        _this3[item] = _this3[item].bind(_this3);
      });
      this.player.on('destroy', this.destroy);
      this.player.on('timeupdate', this.__onTimeupdate);
      addObserver(player.root, this._onResize);
    }
  }, {
    key: 'detachPlayer',
    value: function detachPlayer() {
      var player = this.player;

      if (!player) {
        return;
      }
      player.off('destroy', this.destroy);
      player.off('timeupdate', this.__onTimeupdate);
      if (player.root) {
        unObserver(player.root, this._onResize);
        player.root.removeChild(this.root);
      }
      this.innerRoot = null;
      this.root = null;
      this.player = null;
    }
  }, {
    key: 'switch',
    value: function _switch() {
      var _this4 = this;

      var subtitle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { id: '', language: '' };

      this._loadingTrack = subtitle;
      console.log('switch', subtitle, this.textTrack);
      return new Promise(function (resolve, reject) {
        // 无参数的情况下
        if (!subtitle.id && !subtitle.language) {
          if (_this4.currentText) {
            _this4._loadingTrack = {};
            _this4._updateCurrent(_this4.currentText);
            _this4._isOpen = true;
            _this4.show();
            var err = _ERROR(0, { message: 'switch default subtitle success' });
            resolve(err);
            return;
          } else {
            var _err3 = _ERROR(5, { message: 'no default subtitle' });
            reject(_err3);
            return;
          }
        }
        if (_this4.currentText && checkSubtitle(subtitle, _this4.currentText)) {
          _this4._loadingTrack = {};
          _this4._updateCurrent(_this4.currentText);
          _this4._isOpen = true;
          _this4.show();
          resolve(_ERROR(0));
        } else {
          console.log('this.textTrack', _this4.textTrack);
          var nextSubtitle = null;
          for (var i = 0; i < _this4.textTrack.length; i++) {
            if (checkSubtitle(subtitle, _this4.textTrack[i])) {
              nextSubtitle = _this4.textTrack[i];
              break;
            }
          }
          if (nextSubtitle) {
            if (nextSubtitle.list) {
              _this4._loadingTrack = {};
              _this4._updateCurrent(nextSubtitle);
              _this4._isOpen = true;
              _this4.show();
              resolve(_ERROR(0));
            } else {
              __loadText(nextSubtitle).then(function (textTrack) {
                _this4.addStyles(textTrack);
                // 比对最近一次的信息
                if (_this4._loadingTrack.id === nextSubtitle.id || _this4._loadingTrack.language === textTrack.language) {
                  _this4._loadingTrack = {};
                  _this4._updateCurrent(textTrack);
                  _this4._isOpen = true;
                  _this4.show();
                  resolve(_ERROR(0));
                } else {
                  var _err4 = _ERROR(6, { message: 'check _loadingTrack fail id: ' + _this4._loadingTrack.id + '  nextSubtitle:' + textTrack.id });
                  console.trace(_err4);
                  reject(_err4);
                }
              }).catch(function (err) {
                reject(err);
              });
            }
          } else {
            var _err5 = _ERROR(4, new Error('The is no subtitle with id:[{' + subtitle.id + '}] or language:[' + subtitle.language + ']'));
            console.trace(_err5);
            reject(_err5);
          }
        }
      });
    }
  }, {
    key: 'switchOff',
    value: function switchOff() {
      this._isOpen = false;
      this.hide();
    }
  }, {
    key: '_updateCurrent',
    value: function _updateCurrent(subtitle) {
      var _this5 = this;

      this.currentText = subtitle;
      ['language', 'id', 'label'].map(function (key) {
        _this5.root.setAttribute('data-' + key, _this5.currentText[key] || '');
      });
      this.__remove(this._cids);
      var currentTime = this.player.currentTime;
      this._cids = [];
      this._gid = -1;
      this._cid = -1;
      this._update(currentTime);
    }
  }, {
    key: '__loadAll',
    value: function __loadAll() {
      this.textTrack.map(function (item) {
        __loadText(item);
      });
    }
  }, {
    key: 'getDelCid',
    value: function getDelCid(oldArr, newArr) {
      var ret = [];
      for (var i = 0; i < oldArr.length; i++) {
        if (!newArr.includes(oldArr[i])) {
          ret.push(oldArr[i]);
        }
      }
      return ret;
    }
  }, {
    key: 'getNewCid',
    value: function getNewCid(oldArr, newArr) {
      var ret = [];
      for (var i = 0; i < newArr.length; i++) {
        if (!oldArr.includes(newArr[i])) {
          ret.push(newArr[i]);
        }
      }
      return ret;
    }
  }, {
    key: '_update',
    value: function _update(currentTime) {
      var _this6 = this;

      var _gid = findIndexByTime(currentTime, this.currentText.list, this._gid);
      var _cids = [];
      if (_gid > -1) {
        _cids = findCIndexByTime(currentTime, this.currentText.list[_gid].list, this._cid);
      }
      // console.log(this._gid, this._cid, _gid, _cids, currentTime)

      // 当前没有数据，清空
      if (_cids.length < 1) {
        this._cids.length > 0 && this.__remove(this._cids);
        this._cids = [];
        return;
      }
      // 数据没有更新
      if (this._cids === _cids && _gid === this._gid) {
        return;
      }
      this._gid = _gid;
      this._cid = _cids[0];

      // 需要删除的数据
      var delCids = this.getDelCid(this._cids, _cids);

      // 需要新增的数据
      var newCids = this.getNewCid(this._cids, _cids);

      this._cids = _cids;
      this.__remove(delCids);
      var texts = [];
      newCids.map(function (item) {
        var text = _this6.currentText.list[_gid].list[item];
        text.index = item;
        texts.push(text);
      });
      this.__render(texts, currentTime);
    }
  }, {
    key: '__onTimeupdate',
    value: function __onTimeupdate() {
      if (!this._isOpen) {
        return;
      }
      var _player$video = this.player.video,
          videoWidth = _player$video.videoWidth,
          videoHeight = _player$video.videoHeight;

      if (!this._videoMeta.scale && videoWidth && videoHeight) {
        this._onResize(this.player.root);
      }
      var currentTime = this.player.currentTime;
      if (Math.round(Math.abs(currentTime * 1000 - this._ctime)) < 200) {
        return;
      }
      this._ctime = currentTime * 1000;
      if (this.currentText && this.currentText.list) {
        this._update(currentTime);
      }
    }
  }, {
    key: '_onResize',
    value: function _onResize(target) {
      var _videoMeta = this._videoMeta;

      if (!target || !(target instanceof window.Element)) {
        target = this.player.root;
      }
      if (this._iId) {
        clearTimeout(this._iId);
        this._iId = null;
      }
      if (!_videoMeta.scale) {
        if (!this.player.video) {
          return;
        }
        var _player$video2 = this.player.video,
            videoWidth = _player$video2.videoWidth,
            videoHeight = _player$video2.videoHeight;

        if (videoWidth && videoHeight) {
          _videoMeta.videoWidth = videoWidth;
          _videoMeta.videoHeight = videoHeight;
          _videoMeta.scale = parseInt(videoHeight / videoWidth * 100, 10);
        } else {
          return;
        }
      }
      this.__startResize(target);
    }
  }, {
    key: 'resize',
    value: function resize(width, height) {
      var _this7 = this;

      var _config2 = this.config,
          baseSizeX = _config2.baseSizeX,
          baseSizeY = _config2.baseSizeY,
          minMobileSize = _config2.minMobileSize,
          minSize = _config2.minSize,
          fitVideo = _config2.fitVideo,
          offsetBottom = _config2.offsetBottom;
      var scale = this._videoMeta.scale;

      this._videoMeta.lwidth = width;
      this._videoMeta.lheight = height;
      var vWidth = void 0;var vHeight = 0;
      if (height / width * 100 >= scale) {
        vHeight = parseInt(scale * width, 10) / 100;
        vWidth = width;
      } else {
        vHeight = height;
        vWidth = parseInt(height / scale * 100, 10);
      }
      // console.log(`height:${height} width:${width} vWidth:${vWidth} vHeight:${vHeight} this._videoMeta.vWidth:${this._videoMeta.vWidth} this._videoMeta.vHeight:${this._videoMeta.vHeight}`)
      this._videoMeta.vWidth = vWidth;
      this._videoMeta.vHeight = vHeight;
      var _size = 0;
      var fontSize = 0;
      if (scale > 120) {
        _size = baseSizeY;
        fontSize = parseInt(_size * vHeight / 1080, 10);
      } else {
        _size = baseSizeX;
        fontSize = parseInt(_size * vWidth / 1920, 10);
      }
      var mini = IS_MOBILE ? minMobileSize : minSize;
      fontSize = fontSize < mini ? mini : fontSize > _size ? _size : fontSize;
      var style = {
        fontSize: fontSize
      };
      var vBottom = parseInt((height - vHeight) / 2, 10);
      var vLeft = parseInt((width - vWidth) / 2, 10);
      var marginBottom = parseInt(vHeight * offsetBottom, 10) / 100;
      this._videoMeta.vBottom = vBottom;
      this._videoMeta.vLeft = vLeft;
      this._videoMeta.marginBottom = marginBottom;
      if (fitVideo) {
        style.bottom = vBottom + marginBottom;
        style.left = style.right = vLeft;
      }
      // console.log(`fitVideo vLeft:${vLeft} vBottom:${vBottom} marginBottom:${marginBottom} vWidth:${vWidth} vHeight:${vHeight} fontSize:${fontSize}`)
      Object.keys(style).map(function (item) {
        _this7.root.style[item] = style[item] + 'px';
      });
      this.emit(EVENTS.RESIZE, {
        vLeft: vLeft,
        vBottom: vBottom,
        marginBottom: marginBottom,
        vWidth: vWidth,
        vHeight: vHeight,
        fontSize: fontSize,
        scale: scale
      });
    }
  }, {
    key: '__startResize',
    value: function __startResize(target) {
      var _this8 = this;

      var rect = target.getBoundingClientRect();
      var _videoMeta = this._videoMeta;
      var width = rect.width,
          height = rect.height;

      if (this._iId) {
        clearTimeout(this._iId);
        this._iId = null;
      }
      // console.log(`__startResize width:${width} height:${height} lwidth:${this._videoMeta.lwidth} lheight:${this._videoMeta.lheight}`)
      if (width > 0 && height > 0 && (width !== _videoMeta.lwidth || height !== _videoMeta.lheight)) {
        this._iC = 0;
        this.resize(width, height);
      } else {
        if (this._iC >= 5) {
          this._iC = 0;
          return;
        }
        this._iC++;
        this._iId = setTimeout(function () {
          _this8.__startResize(target);
        }, 50);
      }
    }

    /**
     * @description 移除过期dom
     * @param {Array<number>} ids
     * @returns
     */

  }, {
    key: '__remove',
    value: function __remove(ids) {
      var _this9 = this;

      if (!ids || ids.length < 1) {
        return;
      }
      var children = this.innerRoot.children;
      var removeIndex = [];
      for (var i = 0; i < children.length; i++) {
        var index = Number(children[i].getAttribute('data-index'));
        if (ids.includes(index)) {
          removeIndex.push(children[i]);
        }
      }
      removeIndex.map(function (item) {
        _this9.innerRoot.removeChild(item);
      });
    }

    /**
     * @description 渲染新增dom
     * @param {Array<any>} jsonItems
     */

  }, {
    key: '__render',
    value: function __render() {
      var _this10 = this;

      var jsonItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (jsonItems.length > 0) {
        jsonItems.map(function (jsonItem) {
          var className = 'text-track-' + _this10.config.line;
          jsonItem.text.map(function (item, index) {
            if (index > 0) {
              className += ' text-track-deputy';
            }
            var attr = {
              'data-tag': jsonItem.textTag[index],
              'data-start': jsonItem.start,
              'data-end': jsonItem.end,
              'data-index': jsonItem.index
            };
            _this10.innerRoot.appendChild(createDom('xg-text-track-span', item, attr, className));
          });
        });
      }
    }
  }, {
    key: 'show',
    value: function show() {
      removeClass(this.root, 'text-track-hide');
    }
  }, {
    key: 'hide',
    value: function hide() {
      addClass(this.root, 'text-track-hide');
      this.innerRoot.innerHTML = '';
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.detachPlayer();
      this.removeAllListeners();
      this.player = null;
      this.textTrack = null;
    }

    /**
     * @description 获取底部边距
     */

  }, {
    key: 'marginBottom',
    get: function get() {
      var _videoMeta2 = this._videoMeta,
          bottom = _videoMeta2.bottom,
          marginBottom = _videoMeta2.marginBottom;

      return this.config.fitVideo ? bottom + marginBottom : marginBottom;
    }
  }]);

  return Subtitle;
}(EventEmitter);

export default Subtitle;