var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

export function hasClass(el, className) {
  if (!el) {
    return false;
  }
  if (el.classList) {
    return Array.prototype.some.call(el.classList, function (item) {
      return item === className;
    });
  } else {
    var orgClassName = el.className && _typeof(el.className) === 'object' ? el.getAttribute('class') : el.className;
    return orgClassName && !!orgClassName.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
  }
}

export function addClass(el, className) {
  if (!el) {
    return;
  }

  if (el.classList) {
    className.replace(/(^\s+|\s+$)/g, '').split(/\s+/g).forEach(function (item) {
      item && el.classList.add(item);
    });
  } else if (!hasClass(el, className)) {
    if (el.className && _typeof(el.className) === 'object') {
      el.setAttribute('class', el.getAttribute('class') + ' ' + className);
    } else {
      el.className += ' ' + className;
    }
  }
}
export function removeClass(el, className) {
  if (!el) {
    return;
  }
  if (el.classList) {
    className.split(/\s+/g).forEach(function (item) {
      el.classList.remove(item);
    });
  } else if (hasClass(el, className)) {
    className.split(/\s+/g).forEach(function (item) {
      var reg = new RegExp('(\\s|^)' + item + '(\\s|$)');
      if (el.className && _typeof(el.className) === 'object') {
        el.setAttribute('class', el.getAttribute('class').replace(reg, ' '));
      } else {
        el.className = el.className.replace(reg, ' ');
      }
    });
  }
}

export function findIndexByTime(currentTime, list, index) {
  var len = list.length;
  if (len < 1) {
    return -1;
  }
  index = index < 0 ? 0 : index >= len ? len - 1 : index;
  if (list[index].start <= currentTime && currentTime < list[index].end) {
    return index;
  } else {
    var i = list[index].end <= currentTime ? index + 1 : 0;
    for (; i < len; i++) {
      if (list[i].start <= currentTime && currentTime < list[i].end) {
        return i;
      } else if (currentTime > list[i].end && i + 1 < len && currentTime < list[i + 1].start) {
        return -1;
      } else if (currentTime > list[i].end && i + 1 >= len) {
        return -1;
      }
    }
    return -1;
  }
}

export function findCIndexByTime(currentTime, list, index) {
  var len = list.length;
  if (len < 1) {
    return [];
  }
  index = index < 0 ? 0 : index >= len ? len - 1 : index;
  var ids = [];
  if (index < len) {
    var i = list[index].end <= currentTime ? index : 0;
    for (; i < len; i++) {
      if (list[i].start <= currentTime && currentTime < list[i].end) {
        ids.push(i);
      }
      if (currentTime < list[i].start) {
        break;
      }
    }
  }
  return ids;
}

export function typeOf(obj) {
  return Object.prototype.toString.call(obj).match(/([^\s.*]+)(?=]$)/g)[0];
}

/**
 *
 * @param { string } el
 * @param { string } [tpl=]
 * @param { {[propName: string]: any }} [attrs={}]
 * @param { string } [cname='']
 * @returns { HTMLElement | null }
 */
export function createDom() {
  var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
  var tpl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var cname = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var dom = document.createElement(el);
  dom.className = cname;
  dom.innerHTML = tpl;
  Object.keys(attrs).forEach(function (item) {
    var key = item;
    var value = attrs[item];
    if (el === 'video' || el === 'audio' || el === 'live-video') {
      if (value) {
        dom.setAttribute(key, value);
      }
    } else {
      dom.setAttribute(key, value);
    }
  });
  return dom;
}

export function isMobile() {
  var ua = navigator.userAgent;
  var isWindowsPhone = /(?:Windows Phone)/.test(ua);
  var isSymbian = /(?:SymbianOS)/.test(ua) || isWindowsPhone;
  var isAndroid = /(?:Android)/.test(ua);
  var isFireFox = /(?:Firefox)/.test(ua);
  var isTablet = /(?:iPad|PlayBook)/.test(ua) || isAndroid && !/(?:Mobile)/.test(ua) || isFireFox && /(?:Tablet)/.test(ua);
  var isPhone = /(?:iPhone)/.test(ua) && !isTablet;
  return isPhone || isAndroid || isSymbian || isTablet;
}

export function addCSS(styles) {
  var preTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var cssText = '';
  styles.map(function (item) {
    cssText += ' ' + preTag + ' ' + item.key + ' {' + item.style + '}';
  });
  var styleTag = document.createElement('style'); // 创建一个style元素
  var head = document.head || document.getElementsByTagName('head')[0]; // 获取head元素
  styleTag.type = 'text/css'; // 这里必须显示设置style元素的type属性为text/css，否则在ie中不起作用
  styleTag.id = 'ssss';
  if (styleTag.styleSheet) {
    // IE
    var func = function func() {
      try {
        // 防止IE中stylesheet数量超过限制而发生错误
        styleTag.styleSheet.cssText = cssText;
      } catch (e) {}
    };
    // 如果当前styleSheet还不能用，则放到异步中则行
    if (styleTag.styleSheet.disabled) {
      setTimeout(func, 10);
    } else {
      func();
    }
  } else {
    // w3c
    // w3c浏览器中只要创建文本节点插入到style元素中就行了
    var textNode = document.createTextNode(cssText);
    styleTag.appendChild(textNode);
  }
  head.appendChild(styleTag); // 把创建的style元素插入到head中
}