function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var XHR = function XHR() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      url = _ref.url,
      _ref$method = _ref.method,
      method = _ref$method === undefined ? 'GET' : _ref$method,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'arraybuffer' : _ref$type,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 10000 : _ref$timeout,
      _ref$data = _ref.data,
      data = _ref$data === undefined ? {} : _ref$data;

  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  _classCallCheck(this, XHR);

  return new Promise(function (resolve, reject) {
    var R = new window.XMLHttpRequest();
    var _method = method.toUpperCase();
    var _data = [];
    // const result = {
    //   headers: {},
    //   status: 0,
    //   statusText: '',
    //   connectTime: 0,
    //   speed: 0,
    //   url: url
    // }
    if (type) {
      R.responseType = type;
    }
    if (timeout) {
      R.timeout = timeout;
    }
    for (var k in data) {
      _data.push('k=' + data[k]);
    }
    R.onload = function () {
      if (R.status === 200 || R.status === 206) {
        resolve({ context: context, res: R });
      } else {
        reject(new Error({ context: context, res: R, type: 'error' }));
      }
    };
    R.onerror = function (e) {
      reject(new Error({ context: context, res: R, type: 'error' }));
    };
    R.ontimeout = function (e) {
      reject(new Error({ context: context, res: R, type: 'error' }));
    };
    R.onabort = function () {
      reject(new Error({ context: context, res: R, type: 'error' }));
    };

    if (_method === 'GET') {
      // R.withCredentials = true;
      R.open(_method, '' + url);
      R.send();
    } else if (_method === 'post') {
      R.open(_method, url);
      R.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
      R.send(_data.join('&'));
    } else {
      throw new Error('xhr ' + _method + ' is not supported');
    }
  });
};

export default XHR;